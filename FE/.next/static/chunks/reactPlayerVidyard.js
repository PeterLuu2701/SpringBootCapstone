/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerVidyard"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __create = Object.create;\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __export = (target, all) => {\r\n  for (var name in all)\r\n    __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\r\n  // If the importer is in node compatibility mode or this is not an ESM\r\n  // file that has been converted to a CommonJS file using a Babel-\r\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\r\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\r\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\r\n  mod\r\n));\r\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\r\nvar __publicField = (obj, key, value) => {\r\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\r\n  return value;\r\n};\r\nvar Vidyard_exports = {};\r\n__export(Vidyard_exports, {\r\n  default: () => Vidyard\r\n});\r\nmodule.exports = __toCommonJS(Vidyard_exports);\r\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\r\nvar import_utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lib/utils.js\");\r\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lib/patterns.js\");\r\nconst SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\r\nconst SDK_GLOBAL = \"VidyardV4\";\r\nconst SDK_GLOBAL_READY = \"onVidyardAPI\";\r\nclass Vidyard extends import_react.Component {\r\n  constructor() {\r\n    super(...arguments);\r\n    __publicField(this, \"callPlayer\", import_utils.callPlayer);\r\n    __publicField(this, \"mute\", () => {\r\n      this.setVolume(0);\r\n    });\r\n    __publicField(this, \"unmute\", () => {\r\n      if (this.props.volume !== null) {\r\n        this.setVolume(this.props.volume);\r\n      }\r\n    });\r\n    __publicField(this, \"ref\", (container) => {\r\n      this.container = container;\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.onMount && this.props.onMount(this);\r\n  }\r\n  load(url) {\r\n    const { playing, config, onError, onDuration } = this.props;\r\n    const id = url && url.match(import_patterns.MATCH_URL_VIDYARD)[1];\r\n    if (this.player) {\r\n      this.stop();\r\n    }\r\n    (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((Vidyard2) => {\r\n      if (!this.container)\r\n        return;\r\n      Vidyard2.api.addReadyListener((data, player) => {\r\n        if (this.player) {\r\n          return;\r\n        }\r\n        this.player = player;\r\n        this.player.on(\"ready\", this.props.onReady);\r\n        this.player.on(\"play\", this.props.onPlay);\r\n        this.player.on(\"pause\", this.props.onPause);\r\n        this.player.on(\"seek\", this.props.onSeek);\r\n        this.player.on(\"playerComplete\", this.props.onEnded);\r\n      }, id);\r\n      Vidyard2.api.renderPlayer({\r\n        uuid: id,\r\n        container: this.container,\r\n        autoplay: playing ? 1 : 0,\r\n        ...config.options\r\n      });\r\n      Vidyard2.api.getPlayerMetadata(id).then((meta) => {\r\n        this.duration = meta.length_in_seconds;\r\n        onDuration(meta.length_in_seconds);\r\n      });\r\n    }, onError);\r\n  }\r\n  play() {\r\n    this.callPlayer(\"play\");\r\n  }\r\n  pause() {\r\n    this.callPlayer(\"pause\");\r\n  }\r\n  stop() {\r\n    window.VidyardV4.api.destroyPlayer(this.player);\r\n  }\r\n  seekTo(amount, keepPlaying = true) {\r\n    this.callPlayer(\"seek\", amount);\r\n    if (!keepPlaying) {\r\n      this.pause();\r\n    }\r\n  }\r\n  setVolume(fraction) {\r\n    this.callPlayer(\"setVolume\", fraction);\r\n  }\r\n  setPlaybackRate(rate) {\r\n    this.callPlayer(\"setPlaybackSpeed\", rate);\r\n  }\r\n  getDuration() {\r\n    return this.duration;\r\n  }\r\n  getCurrentTime() {\r\n    return this.callPlayer(\"currentTime\");\r\n  }\r\n  getSecondsLoaded() {\r\n    return null;\r\n  }\r\n  render() {\r\n    const { display } = this.props;\r\n    const style = {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      display\r\n    };\r\n    return /* @__PURE__ */ import_react.default.createElement(\"div\", { style }, /* @__PURE__ */ import_react.default.createElement(\"div\", { ref: this.ref }));\r\n  }\r\n}\r\n__publicField(Vidyard, \"displayName\", \"Vidyard\");\r\n__publicField(Vidyard, \"canPlay\", import_patterns.canPlay.vidyard);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lib/players/Vidyard.js\n"));

/***/ })

}]);