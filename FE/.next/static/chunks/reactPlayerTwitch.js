/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerTwitch"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __create = Object.create;\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __getProtoOf = Object.getPrototypeOf;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __export = (target, all) => {\r\n  for (var name in all)\r\n    __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\r\n  // If the importer is in node compatibility mode or this is not an ESM\r\n  // file that has been converted to a CommonJS file using a Babel-\r\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\r\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\r\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\r\n  mod\r\n));\r\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\r\nvar __publicField = (obj, key, value) => {\r\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\r\n  return value;\r\n};\r\nvar Twitch_exports = {};\r\n__export(Twitch_exports, {\r\n  default: () => Twitch\r\n});\r\nmodule.exports = __toCommonJS(Twitch_exports);\r\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\r\nvar import_utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lib/utils.js\");\r\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lib/patterns.js\");\r\nconst SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\r\nconst SDK_GLOBAL = \"Twitch\";\r\nconst PLAYER_ID_PREFIX = \"twitch-player-\";\r\nclass Twitch extends import_react.Component {\r\n  constructor() {\r\n    super(...arguments);\r\n    __publicField(this, \"callPlayer\", import_utils.callPlayer);\r\n    __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\r\n    __publicField(this, \"mute\", () => {\r\n      this.callPlayer(\"setMuted\", true);\r\n    });\r\n    __publicField(this, \"unmute\", () => {\r\n      this.callPlayer(\"setMuted\", false);\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.onMount && this.props.onMount(this);\r\n  }\r\n  load(url, isReady) {\r\n    const { playsinline, onError, config, controls } = this.props;\r\n    const isChannel = import_patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\r\n    const id = isChannel ? url.match(import_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(import_patterns.MATCH_URL_TWITCH_VIDEO)[1];\r\n    if (isReady) {\r\n      if (isChannel) {\r\n        this.player.setChannel(id);\r\n      } else {\r\n        this.player.setVideo(\"v\" + id);\r\n      }\r\n      return;\r\n    }\r\n    (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Twitch2) => {\r\n      this.player = new Twitch2.Player(this.playerID, {\r\n        video: isChannel ? \"\" : id,\r\n        channel: isChannel ? id : \"\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        playsinline,\r\n        autoplay: this.props.playing,\r\n        muted: this.props.muted,\r\n        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\r\n        controls: isChannel ? true : controls,\r\n        time: (0, import_utils.parseStartTime)(url),\r\n        ...config.options\r\n      });\r\n      const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE, SEEK } = Twitch2.Player;\r\n      this.player.addEventListener(READY, this.props.onReady);\r\n      this.player.addEventListener(PLAYING, this.props.onPlay);\r\n      this.player.addEventListener(PAUSE, this.props.onPause);\r\n      this.player.addEventListener(ENDED, this.props.onEnded);\r\n      this.player.addEventListener(SEEK, this.props.onSeek);\r\n      this.player.addEventListener(ONLINE, this.props.onLoaded);\r\n      this.player.addEventListener(OFFLINE, this.props.onLoaded);\r\n    }, onError);\r\n  }\r\n  play() {\r\n    this.callPlayer(\"play\");\r\n  }\r\n  pause() {\r\n    this.callPlayer(\"pause\");\r\n  }\r\n  stop() {\r\n    this.callPlayer(\"pause\");\r\n  }\r\n  seekTo(seconds, keepPlaying = true) {\r\n    this.callPlayer(\"seek\", seconds);\r\n    if (!keepPlaying) {\r\n      this.pause();\r\n    }\r\n  }\r\n  setVolume(fraction) {\r\n    this.callPlayer(\"setVolume\", fraction);\r\n  }\r\n  getDuration() {\r\n    return this.callPlayer(\"getDuration\");\r\n  }\r\n  getCurrentTime() {\r\n    return this.callPlayer(\"getCurrentTime\");\r\n  }\r\n  getSecondsLoaded() {\r\n    return null;\r\n  }\r\n  render() {\r\n    const style = {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n    };\r\n    return /* @__PURE__ */ import_react.default.createElement(\"div\", { style, id: this.playerID });\r\n  }\r\n}\r\n__publicField(Twitch, \"displayName\", \"Twitch\");\r\n__publicField(Twitch, \"canPlay\", import_patterns.canPlay.twitch);\r\n__publicField(Twitch, \"loopOnEnded\", true);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lib/players/Twitch.js\n"));

/***/ })

}]);